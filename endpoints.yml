# This file contains the different endpoints your bot can use.

# Server where the models are pulled from.
# https://rasa.com/docs/rasa/model-storage#fetching-models-from-a-server

#models:
#  url: http://my-server.com/models/default_core@latest
#  wait_time_between_pulls:  10   # [optional](default: 100)

# Server which runs your custom actions.
# https://rasa.com/docs/rasa/custom-actions

action_endpoint:
  url: "http://localhost:5055/webhook"

# Tracker store which is used to store the conversations.
# By default the conversations are stored in memory.
# https://rasa.com/docs/rasa/tracker-stores

#tracker_store:
#  type: redis
#  url: <host of the redis instance, e.g. localhost>
#  port: <port of your redis instance, usually 6379>
#  db: <number of your redis database. e.g. 0>
#  password: <password used for authentication>
#  use_ssl: <whether or not the communication is encrypted, default false>

#tracker_store:
#  type: mongod
#  url: <url to your mongo instance, e.g. mongodb://localhost:27017>
#  db: <name of the db within your mongo instance, e.g. rasa>
#  username: <username used for authentication>
#  password: <password used for authentication>

#tracker_store:
#  type: postgresql
#  url: <host of the postgres instance, e.g. localhost>
#  port: <port of your postgres instance, 5432>
#  db: <name of the db within your postgres instance, e.g. rasa>
#  username: <username used for authentication>
#  password: <password used for authentication>
#  use_ssl: <whether or not the communication is encrypted, default false>

# Event broker which all conversation events are streamed to.
# https://rasa.com/docs/rasa/event-brokers

#event_broker:
#  url: localhost
#  username: username
#  password: password
#  queue: queue

#event_broker:
#  type: pika
#  url: localhost
#  username: username
#  password: password
#  queue: queue

#event_broker:
#  type: kafka
#  security_protocol: PLAINTEXT
#  sasl_username: username
#  sasl_password: password
#  sasl_mechanism: PLAIN
#  topic: topic

#event_broker:
#  type: sql
#  dialect: postgresql
#  url: localhost
#  username: username
#  password: password
#  db: dbname

#event_broker:
#  type: redis
#  url: localhost
#  port: 6379
#  db: 0
#  password: password
#  use_ssl: false
#  username: username

# Lock store which is used to store the conversation locks.
# By default the locks are stored in memory.
# https://rasa.com/docs/rasa/lock-stores

#lock_store:
#  type: redis
#  url: <host of the redis instance, e.g. localhost>
#  port: <port of your redis instance, usually 6379>
#  db: <number of your redis database. e.g. 0>
#  password: <password used for authentication>
#  use_ssl: <whether or not the communication is encrypted, default false>

#lock_store:
#  type: postgresql
#  url: <host of the postgres instance, e.g. localhost>
#  port: <port of your postgres instance, 5432>
#  db: <name of the db within your postgres instance, e.g. rasa>
#  username: <username used for authentication>
#  password: <password used for authentication>
#  use_ssl: <whether or not the communication is encrypted, default false>

# Allow rephrasing of responses using a Rasa-hosted model
nlg:
  type: rephrase
  llm:
    model_group: rasa_command_generation_model

model_groups:
  - id: rasa_command_generation_model
    models:
      - provider: rasa
        model: rasa/command-generator-llama-3.1-8b-instruct
        api_base: "https://tutorial-llm.rasa.ai"

feat: implement entity-based client name extraction and slot mapping

## Major Features Added

### Entity-Based Name Extraction
- Add `client_name` entity to domain configuration
- Configure slot mapping with `from_entity` for automatic extraction
- Add `NLUCommandAdapter` to pipeline for entity-based slot mapping
- Implement comprehensive training examples with entity annotations

### Enhanced Name Recognition
- **Entity Training**: Add 10+ examples with `[Name](client_name)` annotations
- **Intent Coverage**: Cover `start`, `confirm_identity`, `deny_identity` intents
- **Name Varieties**: Support for Dennis, Juan, MarÃ­a, Carlos, Ana, Luis
- **Automatic Extraction**: Names extracted from user messages automatically

### Slot Mapping Configuration
```yaml
slots:
  client_name:
    type: text
    mappings:
    - type: from_entity
      entity: client_name
```

### Pipeline Enhancement
```yaml
pipeline:
  # ... existing components ...
  - name: NLUCommandAdapter  # Added for entity-based mapping
```

## Technical Improvements

### Action Enhancements
- **ActionExtractClientName**: Enhanced to use extracted entities first
- **Fallback Logic**: Regex extraction when entity not found
- **Logging**: Separate logging for entity vs text extraction
- **Default Handling**: Maintains "Dennis Kangme" as default

### Entity Recognition
- **Training Examples**: 10+ examples with entity annotations
- **Intent Coverage**: All relevant intents covered
- **Name Patterns**: "soy [Name]", "habla con [Name]", "no soy [Name]"
- **Automatic Mapping**: Entity values automatically mapped to slot

### Rule Configuration
- **EXTERNAL_init_context**: Added rule to handle external context
- **Entity Processing**: Rule triggers name extraction and greeting
- **Flow Integration**: Seamless integration with existing conversation flow

## Files Modified

### Core Configuration
- `domain.yml`: Added entities section and from_entity mapping
- `config.yml`: Added NLUCommandAdapter to pipeline
- `data/rules.yml`: Added rule for EXTERNAL_init_context handling

### Training Data
- `data/nlu.yml`: Added entity examples for all relevant intents
- Enhanced examples with `[Name](client_name)` annotations

### Action Logic
- `actions/actions.py`: Enhanced ActionExtractClientName for entity usage

## Entity Examples Added

### Start Intent
```yaml
- hola soy [Dennis](client_name)
- hola soy [Dennis Kangme](client_name)
- hola me llamo [Dennis](client_name)
- hola soy [Juan](client_name)
- hola soy [MarÃ­a](client_name)
- hola soy [Carlos](client_name)
- hola soy [Ana](client_name)
- hola soy [Luis](client_name)
```

### Confirm Identity Intent
```yaml
- soy [Dennis](client_name)
- soy [Dennis Kangme](client_name)
- habla con [Dennis](client_name)
- con [Dennis](client_name)
- [Dennis](client_name) kangme
- [Dennis](client_name)
- soy [Juan](client_name)
- soy [MarÃ­a](client_name)
- soy [Carlos](client_name)
- soy [Ana](client_name)
- soy [Luis](client_name)
```

### Deny Identity Intent
```yaml
- no soy [Dennis](client_name)
- no es [Dennis](client_name)
- no habla con [Dennis](client_name)
- no soy [Juan](client_name)
- no es [MarÃ­a](client_name)
- no habla con [Carlos](client_name)
```

## Testing Results

### âœ… Entity Extraction
- **Input**: "hola soy Mauricio Martinez"
- **Entity**: `client_name = "Mauricio Martinez"`
- **Slot**: Automatically mapped to `client_name` slot
- **Response**: "Hola soy veriBot... Â¿hablo con Mauricio Martinez?"

### âœ… Fallback Handling
- **Input**: "hola" (no name)
- **Fallback**: Uses regex extraction
- **Default**: "Dennis Kangme" if no name found
- **Logging**: Different logs for entity vs text extraction

### âœ… Rule Integration
- **Intent**: `EXTERNAL_init_context`
- **Rule**: Triggers name extraction and greeting
- **Flow**: Seamless integration with conversation

## Key Improvements

### Before vs After
| Aspecto | Antes | DespuÃ©s |
|---------|-------|---------|
| Name Extraction | Manual regex only | Entity + regex fallback |
| Slot Mapping | Custom action only | Automatic from_entity |
| Training Examples | Generic patterns | Entity-annotated examples |
| Pipeline | Basic NLU | Enhanced with NLUCommandAdapter |
| Rule Coverage | Missing EXTERNAL_init_context | Complete rule coverage |

### Entity Recognition Flow
```
User Input â†’ Entity Extraction â†’ Slot Mapping â†’ Response Generation
     â†“              â†“                â†“              â†“
"hola soy Juan" â†’ client_name â†’ client_name slot â†’ "Â¿hablo con Juan?"
```

## Database Integration

### Logging Enhancements
- **Entity Extraction**: `client_name_extracted_from_entity`
- **Text Extraction**: `client_name_extracted_from_text`
- **Fallback Handling**: Proper logging for debugging

### Action Improvements
```python
# First try entity extraction
entities = tracker.latest_message.get('entities', [])
for entity in entities:
    if entity['entity'] == 'client_name':
        client_name = entity['value'].strip().title()
        return [SlotSet("client_name", client_name)]

# Fallback to regex extraction
name_pattern = r'soy\s+([a-zA-Z\s]+)'
match = re.search(name_pattern, latest_message)
```

## Breaking Changes

**None** - All changes are backward compatible

## Dependencies

- **NLUCommandAdapter**: Required for from_entity mapping
- **Entity Training**: Enhanced training data with annotations
- **Rule Configuration**: New rule for external context handling

## Environment Variables

No new environment variables required

## Next Steps (Optional)

- Add more name variations and patterns
- Implement name validation and normalization
- Add support for compound names
- Create name preference learning

## Testing Commands

```bash
# Test entity extraction
echo "EXTERNAL_init_context Mauricio Martinez" | rasa shell

# Verify slot mapping
rasa shell --debug

# Check entity recognition
rasa test nlu --nlu data/nlu.yml
```

## Performance Impact

- **Entity Recognition**: Improved accuracy with annotated examples
- **Slot Mapping**: Automatic mapping reduces custom action calls
- **Response Quality**: More personalized responses with actual names
- **Fallback Robustness**: Maintains functionality when entities not found

---

**ðŸš€ Entity-based name extraction fully implemented and tested** 